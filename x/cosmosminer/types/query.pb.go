// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmosminer/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetMinerInfoRequest struct {
}

func (m *QueryGetMinerInfoRequest) Reset()         { *m = QueryGetMinerInfoRequest{} }
func (m *QueryGetMinerInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMinerInfoRequest) ProtoMessage()    {}
func (*QueryGetMinerInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{2}
}
func (m *QueryGetMinerInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMinerInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMinerInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMinerInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMinerInfoRequest.Merge(m, src)
}
func (m *QueryGetMinerInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMinerInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMinerInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMinerInfoRequest proto.InternalMessageInfo

type QueryGetMinerInfoResponse struct {
	MinerInfo MinerInfo `protobuf:"bytes,1,opt,name=MinerInfo,proto3" json:"MinerInfo"`
}

func (m *QueryGetMinerInfoResponse) Reset()         { *m = QueryGetMinerInfoResponse{} }
func (m *QueryGetMinerInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMinerInfoResponse) ProtoMessage()    {}
func (*QueryGetMinerInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{3}
}
func (m *QueryGetMinerInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMinerInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMinerInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMinerInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMinerInfoResponse.Merge(m, src)
}
func (m *QueryGetMinerInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMinerInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMinerInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMinerInfoResponse proto.InternalMessageInfo

func (m *QueryGetMinerInfoResponse) GetMinerInfo() MinerInfo {
	if m != nil {
		return m.MinerInfo
	}
	return MinerInfo{}
}

type QueryGetStoredMinerTemplateRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetStoredMinerTemplateRequest) Reset()         { *m = QueryGetStoredMinerTemplateRequest{} }
func (m *QueryGetStoredMinerTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredMinerTemplateRequest) ProtoMessage()    {}
func (*QueryGetStoredMinerTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{4}
}
func (m *QueryGetStoredMinerTemplateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredMinerTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredMinerTemplateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredMinerTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredMinerTemplateRequest.Merge(m, src)
}
func (m *QueryGetStoredMinerTemplateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredMinerTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredMinerTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredMinerTemplateRequest proto.InternalMessageInfo

func (m *QueryGetStoredMinerTemplateRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetStoredMinerTemplateResponse struct {
	StoredMinerTemplate StoredMinerTemplate `protobuf:"bytes,1,opt,name=storedMinerTemplate,proto3" json:"storedMinerTemplate"`
}

func (m *QueryGetStoredMinerTemplateResponse) Reset()         { *m = QueryGetStoredMinerTemplateResponse{} }
func (m *QueryGetStoredMinerTemplateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredMinerTemplateResponse) ProtoMessage()    {}
func (*QueryGetStoredMinerTemplateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{5}
}
func (m *QueryGetStoredMinerTemplateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredMinerTemplateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredMinerTemplateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredMinerTemplateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredMinerTemplateResponse.Merge(m, src)
}
func (m *QueryGetStoredMinerTemplateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredMinerTemplateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredMinerTemplateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredMinerTemplateResponse proto.InternalMessageInfo

func (m *QueryGetStoredMinerTemplateResponse) GetStoredMinerTemplate() StoredMinerTemplate {
	if m != nil {
		return m.StoredMinerTemplate
	}
	return StoredMinerTemplate{}
}

type QueryAllStoredMinerTemplateRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredMinerTemplateRequest) Reset()         { *m = QueryAllStoredMinerTemplateRequest{} }
func (m *QueryAllStoredMinerTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredMinerTemplateRequest) ProtoMessage()    {}
func (*QueryAllStoredMinerTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{6}
}
func (m *QueryAllStoredMinerTemplateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredMinerTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredMinerTemplateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredMinerTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredMinerTemplateRequest.Merge(m, src)
}
func (m *QueryAllStoredMinerTemplateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredMinerTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredMinerTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredMinerTemplateRequest proto.InternalMessageInfo

func (m *QueryAllStoredMinerTemplateRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStoredMinerTemplateResponse struct {
	StoredMinerTemplate []StoredMinerTemplate `protobuf:"bytes,1,rep,name=storedMinerTemplate,proto3" json:"storedMinerTemplate"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredMinerTemplateResponse) Reset()         { *m = QueryAllStoredMinerTemplateResponse{} }
func (m *QueryAllStoredMinerTemplateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredMinerTemplateResponse) ProtoMessage()    {}
func (*QueryAllStoredMinerTemplateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{7}
}
func (m *QueryAllStoredMinerTemplateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredMinerTemplateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredMinerTemplateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredMinerTemplateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredMinerTemplateResponse.Merge(m, src)
}
func (m *QueryAllStoredMinerTemplateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredMinerTemplateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredMinerTemplateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredMinerTemplateResponse proto.InternalMessageInfo

func (m *QueryAllStoredMinerTemplateResponse) GetStoredMinerTemplate() []StoredMinerTemplate {
	if m != nil {
		return m.StoredMinerTemplate
	}
	return nil
}

func (m *QueryAllStoredMinerTemplateResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStoredMinerRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetStoredMinerRequest) Reset()         { *m = QueryGetStoredMinerRequest{} }
func (m *QueryGetStoredMinerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredMinerRequest) ProtoMessage()    {}
func (*QueryGetStoredMinerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{8}
}
func (m *QueryGetStoredMinerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredMinerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredMinerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredMinerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredMinerRequest.Merge(m, src)
}
func (m *QueryGetStoredMinerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredMinerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredMinerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredMinerRequest proto.InternalMessageInfo

func (m *QueryGetStoredMinerRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetStoredMinerResponse struct {
	StoredMiner StoredMiner `protobuf:"bytes,1,opt,name=storedMiner,proto3" json:"storedMiner"`
}

func (m *QueryGetStoredMinerResponse) Reset()         { *m = QueryGetStoredMinerResponse{} }
func (m *QueryGetStoredMinerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredMinerResponse) ProtoMessage()    {}
func (*QueryGetStoredMinerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{9}
}
func (m *QueryGetStoredMinerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredMinerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredMinerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredMinerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredMinerResponse.Merge(m, src)
}
func (m *QueryGetStoredMinerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredMinerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredMinerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredMinerResponse proto.InternalMessageInfo

func (m *QueryGetStoredMinerResponse) GetStoredMiner() StoredMiner {
	if m != nil {
		return m.StoredMiner
	}
	return StoredMiner{}
}

type QueryAllStoredMinerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredMinerRequest) Reset()         { *m = QueryAllStoredMinerRequest{} }
func (m *QueryAllStoredMinerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredMinerRequest) ProtoMessage()    {}
func (*QueryAllStoredMinerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{10}
}
func (m *QueryAllStoredMinerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredMinerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredMinerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredMinerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredMinerRequest.Merge(m, src)
}
func (m *QueryAllStoredMinerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredMinerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredMinerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredMinerRequest proto.InternalMessageInfo

func (m *QueryAllStoredMinerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStoredMinerResponse struct {
	StoredMiner []StoredMiner       `protobuf:"bytes,1,rep,name=storedMiner,proto3" json:"storedMiner"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredMinerResponse) Reset()         { *m = QueryAllStoredMinerResponse{} }
func (m *QueryAllStoredMinerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredMinerResponse) ProtoMessage()    {}
func (*QueryAllStoredMinerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{11}
}
func (m *QueryAllStoredMinerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredMinerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredMinerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredMinerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredMinerResponse.Merge(m, src)
}
func (m *QueryAllStoredMinerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredMinerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredMinerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredMinerResponse proto.InternalMessageInfo

func (m *QueryAllStoredMinerResponse) GetStoredMiner() []StoredMiner {
	if m != nil {
		return m.StoredMiner
	}
	return nil
}

func (m *QueryAllStoredMinerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMinerBalanceRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetMinerBalanceRequest) Reset()         { *m = QueryGetMinerBalanceRequest{} }
func (m *QueryGetMinerBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMinerBalanceRequest) ProtoMessage()    {}
func (*QueryGetMinerBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{12}
}
func (m *QueryGetMinerBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMinerBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMinerBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMinerBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMinerBalanceRequest.Merge(m, src)
}
func (m *QueryGetMinerBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMinerBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMinerBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMinerBalanceRequest proto.InternalMessageInfo

func (m *QueryGetMinerBalanceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetMinerBalanceResponse struct {
	MinerBalance MinerBalance `protobuf:"bytes,1,opt,name=minerBalance,proto3" json:"minerBalance"`
}

func (m *QueryGetMinerBalanceResponse) Reset()         { *m = QueryGetMinerBalanceResponse{} }
func (m *QueryGetMinerBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMinerBalanceResponse) ProtoMessage()    {}
func (*QueryGetMinerBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{13}
}
func (m *QueryGetMinerBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMinerBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMinerBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMinerBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMinerBalanceResponse.Merge(m, src)
}
func (m *QueryGetMinerBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMinerBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMinerBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMinerBalanceResponse proto.InternalMessageInfo

func (m *QueryGetMinerBalanceResponse) GetMinerBalance() MinerBalance {
	if m != nil {
		return m.MinerBalance
	}
	return MinerBalance{}
}

type QueryAllMinerBalanceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMinerBalanceRequest) Reset()         { *m = QueryAllMinerBalanceRequest{} }
func (m *QueryAllMinerBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMinerBalanceRequest) ProtoMessage()    {}
func (*QueryAllMinerBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{14}
}
func (m *QueryAllMinerBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMinerBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMinerBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMinerBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMinerBalanceRequest.Merge(m, src)
}
func (m *QueryAllMinerBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMinerBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMinerBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMinerBalanceRequest proto.InternalMessageInfo

func (m *QueryAllMinerBalanceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMinerBalanceResponse struct {
	MinerBalance []MinerBalance      `protobuf:"bytes,1,rep,name=minerBalance,proto3" json:"minerBalance"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMinerBalanceResponse) Reset()         { *m = QueryAllMinerBalanceResponse{} }
func (m *QueryAllMinerBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMinerBalanceResponse) ProtoMessage()    {}
func (*QueryAllMinerBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9974316cb4a261b2, []int{15}
}
func (m *QueryAllMinerBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMinerBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMinerBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMinerBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMinerBalanceResponse.Merge(m, src)
}
func (m *QueryAllMinerBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMinerBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMinerBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMinerBalanceResponse proto.InternalMessageInfo

func (m *QueryAllMinerBalanceResponse) GetMinerBalance() []MinerBalance {
	if m != nil {
		return m.MinerBalance
	}
	return nil
}

func (m *QueryAllMinerBalanceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryParamsResponse")
	proto.RegisterType((*QueryGetMinerInfoRequest)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryGetMinerInfoRequest")
	proto.RegisterType((*QueryGetMinerInfoResponse)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryGetMinerInfoResponse")
	proto.RegisterType((*QueryGetStoredMinerTemplateRequest)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryGetStoredMinerTemplateRequest")
	proto.RegisterType((*QueryGetStoredMinerTemplateResponse)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryGetStoredMinerTemplateResponse")
	proto.RegisterType((*QueryAllStoredMinerTemplateRequest)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryAllStoredMinerTemplateRequest")
	proto.RegisterType((*QueryAllStoredMinerTemplateResponse)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryAllStoredMinerTemplateResponse")
	proto.RegisterType((*QueryGetStoredMinerRequest)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryGetStoredMinerRequest")
	proto.RegisterType((*QueryGetStoredMinerResponse)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryGetStoredMinerResponse")
	proto.RegisterType((*QueryAllStoredMinerRequest)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryAllStoredMinerRequest")
	proto.RegisterType((*QueryAllStoredMinerResponse)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryAllStoredMinerResponse")
	proto.RegisterType((*QueryGetMinerBalanceRequest)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryGetMinerBalanceRequest")
	proto.RegisterType((*QueryGetMinerBalanceResponse)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryGetMinerBalanceResponse")
	proto.RegisterType((*QueryAllMinerBalanceRequest)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryAllMinerBalanceRequest")
	proto.RegisterType((*QueryAllMinerBalanceResponse)(nil), "luktechlabs.cosmosminer.cosmosminer.QueryAllMinerBalanceResponse")
}

func init() { proto.RegisterFile("cosmosminer/query.proto", fileDescriptor_9974316cb4a261b2) }

var fileDescriptor_9974316cb4a261b2 = []byte{
	// 840 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0x5f, 0x4f, 0x13, 0x4d,
	0x14, 0xc6, 0x3b, 0xf0, 0x42, 0xc2, 0xc0, 0xfb, 0xbe, 0xc9, 0x40, 0x14, 0x57, 0x52, 0xcc, 0x90,
	0x88, 0xd1, 0xb0, 0x6b, 0xa9, 0x28, 0xca, 0x7f, 0x24, 0x20, 0x89, 0x26, 0x58, 0xbc, 0x30, 0x7a,
	0x81, 0xdb, 0x32, 0x94, 0xc6, 0xed, 0xce, 0xd2, 0xdd, 0x2a, 0x84, 0x78, 0xe3, 0x27, 0x30, 0xf1,
	0xc2, 0xef, 0xe1, 0x27, 0xf0, 0x42, 0x13, 0xee, 0x24, 0x51, 0x13, 0xbd, 0x31, 0x04, 0xfc, 0x02,
	0xde, 0x78, 0x6d, 0x3a, 0x73, 0xda, 0xce, 0xda, 0x6d, 0xd9, 0x6e, 0xeb, 0x0d, 0x29, 0x3b, 0x73,
	0x9e, 0xf3, 0xfc, 0xce, 0x99, 0xce, 0xd9, 0xe2, 0xb3, 0x19, 0xee, 0xe6, 0xb9, 0x9b, 0xcf, 0xd9,
	0xac, 0x60, 0xec, 0x14, 0x59, 0x61, 0x4f, 0x77, 0x0a, 0xdc, 0xe3, 0x64, 0xc4, 0x2a, 0x3e, 0xf5,
	0x58, 0x66, 0xdb, 0x32, 0xd3, 0xae, 0xae, 0x6c, 0x52, 0x3f, 0x6b, 0x03, 0x59, 0x9e, 0xe5, 0x62,
	0xbf, 0x51, 0xfa, 0x24, 0x43, 0xb5, 0xa1, 0x2c, 0xe7, 0x59, 0x8b, 0x19, 0xa6, 0x93, 0x33, 0x4c,
	0xdb, 0xe6, 0x9e, 0xe9, 0xe5, 0xb8, 0xed, 0xc2, 0xea, 0x65, 0x29, 0x60, 0xa4, 0x4d, 0x97, 0xc9,
	0x8c, 0xc6, 0xb3, 0x44, 0x9a, 0x79, 0x66, 0xc2, 0x70, 0xcc, 0x6c, 0xce, 0x16, 0x9b, 0x61, 0xef,
	0xa0, 0xea, 0xce, 0x31, 0x0b, 0x66, 0xbe, 0xac, 0x32, 0xa4, 0xae, 0x88, 0xbf, 0x1b, 0x39, 0x7b,
	0xab, 0xec, 0x60, 0x54, 0x5d, 0x75, 0x3d, 0x5e, 0x60, 0x9b, 0x1b, 0x72, 0x93, 0xc7, 0xf2, 0x8e,
	0x65, 0x7a, 0x0c, 0x36, 0xc6, 0xeb, 0x6d, 0x84, 0xf5, 0xe1, 0xda, 0x34, 0x69, 0xd3, 0x32, 0xed,
	0x0c, 0x08, 0xd0, 0x01, 0x4c, 0xee, 0x97, 0x18, 0xd6, 0x84, 0xb9, 0x14, 0xdb, 0x29, 0x32, 0xd7,
	0xa3, 0x4f, 0x70, 0xbf, 0xef, 0xa9, 0xeb, 0x70, 0xdb, 0x65, 0x64, 0x15, 0x77, 0x4b, 0x88, 0x41,
	0x74, 0x01, 0x5d, 0xea, 0x1d, 0xbf, 0xa2, 0x87, 0x28, 0xb2, 0x2e, 0x45, 0x16, 0xff, 0x39, 0xf8,
	0x3e, 0x1c, 0x4b, 0x81, 0x00, 0xd5, 0xf0, 0xa0, 0xc8, 0xb0, 0xc2, 0xbc, 0x7b, 0xa5, 0x5d, 0xab,
	0xf6, 0x16, 0x2f, 0x67, 0xe7, 0xf8, 0x5c, 0xc0, 0x1a, 0x78, 0x48, 0xe1, 0x9e, 0xca, 0x43, 0xb0,
	0xa1, 0x87, 0xb2, 0x51, 0x89, 0x02, 0x27, 0x55, 0x19, 0x7a, 0x0b, 0xd3, 0x72, 0xc2, 0x75, 0x51,
	0x43, 0xb1, 0xf4, 0x00, 0x4a, 0x0d, 0xb6, 0xc8, 0x00, 0xee, 0xca, 0xd9, 0x9b, 0x6c, 0x57, 0x64,
	0xed, 0x49, 0xc9, 0x7f, 0xe8, 0x1b, 0x84, 0x47, 0x1a, 0x06, 0x83, 0x6f, 0x07, 0xf7, 0xbb, 0xb5,
	0xcb, 0x40, 0x30, 0x19, 0x8a, 0x20, 0x40, 0x1e, 0x58, 0x82, 0xa4, 0xa9, 0x05, 0x54, 0x0b, 0x96,
	0xd5, 0x80, 0x6a, 0x19, 0xe3, 0xea, 0xb1, 0x05, 0x3b, 0x17, 0x21, 0xad, 0x5e, 0x3a, 0xe3, 0xba,
	0xfc, 0x56, 0xc1, 0x19, 0xd7, 0xd7, 0xcc, 0x6c, 0x39, 0x36, 0xa5, 0x44, 0xd2, 0xa3, 0x72, 0x1d,
	0xea, 0xa5, 0x3b, 0xad, 0x0e, 0x9d, 0x7f, 0xa9, 0x0e, 0x64, 0xc5, 0x47, 0xd8, 0x21, 0x08, 0x47,
	0x4f, 0x25, 0x94, 0x76, 0x7d, 0x88, 0xe3, 0x58, 0x0b, 0xe8, 0x74, 0xe3, 0xe3, 0xf1, 0x1c, 0x9f,
	0x0f, 0x8c, 0x81, 0x6a, 0x3c, 0xc4, 0xbd, 0x8a, 0x65, 0x28, 0xff, 0xd5, 0x66, 0xab, 0x00, 0xf4,
	0xaa, 0x14, 0xdd, 0x04, 0xb3, 0xfe, 0x76, 0xb4, 0xbb, 0xeb, 0xef, 0x10, 0xf0, 0xfd, 0x99, 0xa6,
	0x1e, 0x5f, 0x67, 0x9b, 0xf8, 0xda, 0xd7, 0xd5, 0x64, 0xb5, 0x43, 0x32, 0x99, 0xbc, 0x1f, 0x1b,
	0xb7, 0x75, 0x1f, 0x0f, 0x05, 0x07, 0x01, 0xf7, 0x63, 0xdc, 0x97, 0x57, 0x9e, 0x43, 0x85, 0x13,
	0xe1, 0x2f, 0x2a, 0x08, 0x04, 0x72, 0x9f, 0x18, 0x65, 0xd5, 0x9a, 0x07, 0x39, 0x6e, 0x57, 0x6f,
	0xdf, 0x23, 0x80, 0xac, 0xc9, 0x53, 0x17, 0xb2, 0xb3, 0x6d, 0x90, 0x6d, 0xeb, 0xef, 0xf8, 0xc7,
	0x7f, 0x71, 0x97, 0xc0, 0x20, 0x6f, 0x11, 0xee, 0x96, 0xc3, 0x88, 0xdc, 0x08, 0x65, 0xb2, 0x76,
	0x32, 0x6a, 0x93, 0xcd, 0x07, 0x4a, 0x4f, 0x74, 0xe2, 0xe5, 0xa7, 0x1f, 0xaf, 0x3b, 0x0c, 0x32,
	0x66, 0x80, 0xc2, 0x58, 0x49, 0xc2, 0x90, 0x61, 0x63, 0x72, 0x42, 0xd7, 0xbe, 0x2e, 0x90, 0x0f,
	0x48, 0x19, 0x78, 0x64, 0x26, 0x7c, 0xfa, 0x80, 0xc9, 0xaa, 0xcd, 0x46, 0x0d, 0x07, 0x86, 0x9b,
	0x82, 0x21, 0x49, 0x12, 0x21, 0x19, 0xaa, 0x2f, 0x36, 0xe4, 0x17, 0xc2, 0xfd, 0xeb, 0x41, 0xb7,
	0x73, 0x53, 0x96, 0xea, 0x0f, 0x32, 0xed, 0x4e, 0xeb, 0x42, 0x40, 0x79, 0x57, 0x50, 0x2e, 0x93,
	0xa5, 0x90, 0x94, 0x81, 0x2f, 0x68, 0xc6, 0xbe, 0xb8, 0x29, 0x5e, 0x90, 0x9f, 0x08, 0x9f, 0x09,
	0xc8, 0xb6, 0x60, 0x59, 0xcd, 0xb0, 0x37, 0x1c, 0xe2, 0xcd, 0xb0, 0x37, 0x1e, 0xcf, 0x74, 0x49,
	0xb0, 0xcf, 0x92, 0xe9, 0x56, 0xd8, 0xc9, 0x17, 0x84, 0x7b, 0x95, 0x2c, 0x64, 0x2e, 0x6a, 0x6f,
	0xca, 0x80, 0xf3, 0xd1, 0x05, 0x00, 0xec, 0xb6, 0x00, 0x9b, 0x21, 0x53, 0x11, 0xc0, 0x2a, 0xbd,
	0x3c, 0x44, 0xf8, 0x3f, 0x45, 0xbc, 0xd4, 0xc3, 0xb9, 0xa8, 0xa5, 0x8f, 0x80, 0x16, 0x3c, 0x64,
	0xe9, 0x94, 0x40, 0x9b, 0x20, 0xc9, 0x08, 0x68, 0xe4, 0x1b, 0xc2, 0x7d, 0xea, 0x65, 0x4c, 0xe6,
	0x9b, 0xbf, 0x23, 0xfc, 0x03, 0x48, 0x5b, 0x68, 0x41, 0x21, 0xe2, 0x31, 0xf4, 0xfd, 0xb4, 0xa9,
	0xb4, 0xeb, 0x33, 0xc2, 0xff, 0xab, 0xf2, 0xa5, 0x7e, 0x35, 0x57, 0xee, 0x16, 0xf1, 0xea, 0x4c,
	0x4e, 0x3a, 0x2d, 0xf0, 0xae, 0x93, 0x6b, 0x51, 0xf0, 0x16, 0x53, 0x07, 0xc7, 0x71, 0x74, 0x78,
	0x1c, 0x47, 0x47, 0xc7, 0x71, 0xf4, 0xea, 0x24, 0x1e, 0x3b, 0x3c, 0x89, 0xc7, 0xbe, 0x9e, 0xc4,
	0x63, 0x8f, 0x26, 0xb3, 0x39, 0x6f, 0xbb, 0x98, 0xd6, 0x33, 0x3c, 0xdf, 0x40, 0x79, 0xd7, 0xa7,
	0xed, 0xed, 0x39, 0xcc, 0x4d, 0x77, 0x8b, 0x9f, 0x83, 0xc9, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x88, 0x94, 0x5a, 0x46, 0x50, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a MinerInfo by index.
	MinerInfo(ctx context.Context, in *QueryGetMinerInfoRequest, opts ...grpc.CallOption) (*QueryGetMinerInfoResponse, error)
	// Queries a StoredMinerTemplate by index.
	StoredMinerTemplate(ctx context.Context, in *QueryGetStoredMinerTemplateRequest, opts ...grpc.CallOption) (*QueryGetStoredMinerTemplateResponse, error)
	// Queries a list of StoredMinerTemplate items.
	StoredMinerTemplateAll(ctx context.Context, in *QueryAllStoredMinerTemplateRequest, opts ...grpc.CallOption) (*QueryAllStoredMinerTemplateResponse, error)
	// Queries a StoredMiner by index.
	StoredMiner(ctx context.Context, in *QueryGetStoredMinerRequest, opts ...grpc.CallOption) (*QueryGetStoredMinerResponse, error)
	// Queries a list of StoredMiner items.
	StoredMinerAll(ctx context.Context, in *QueryAllStoredMinerRequest, opts ...grpc.CallOption) (*QueryAllStoredMinerResponse, error)
	// Queries a MinerBalance by index.
	MinerBalance(ctx context.Context, in *QueryGetMinerBalanceRequest, opts ...grpc.CallOption) (*QueryGetMinerBalanceResponse, error)
	// Queries a list of MinerBalance items.
	MinerBalanceAll(ctx context.Context, in *QueryAllMinerBalanceRequest, opts ...grpc.CallOption) (*QueryAllMinerBalanceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/luktechlabs.cosmosminer.cosmosminer.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MinerInfo(ctx context.Context, in *QueryGetMinerInfoRequest, opts ...grpc.CallOption) (*QueryGetMinerInfoResponse, error) {
	out := new(QueryGetMinerInfoResponse)
	err := c.cc.Invoke(ctx, "/luktechlabs.cosmosminer.cosmosminer.Query/MinerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredMinerTemplate(ctx context.Context, in *QueryGetStoredMinerTemplateRequest, opts ...grpc.CallOption) (*QueryGetStoredMinerTemplateResponse, error) {
	out := new(QueryGetStoredMinerTemplateResponse)
	err := c.cc.Invoke(ctx, "/luktechlabs.cosmosminer.cosmosminer.Query/StoredMinerTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredMinerTemplateAll(ctx context.Context, in *QueryAllStoredMinerTemplateRequest, opts ...grpc.CallOption) (*QueryAllStoredMinerTemplateResponse, error) {
	out := new(QueryAllStoredMinerTemplateResponse)
	err := c.cc.Invoke(ctx, "/luktechlabs.cosmosminer.cosmosminer.Query/StoredMinerTemplateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredMiner(ctx context.Context, in *QueryGetStoredMinerRequest, opts ...grpc.CallOption) (*QueryGetStoredMinerResponse, error) {
	out := new(QueryGetStoredMinerResponse)
	err := c.cc.Invoke(ctx, "/luktechlabs.cosmosminer.cosmosminer.Query/StoredMiner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredMinerAll(ctx context.Context, in *QueryAllStoredMinerRequest, opts ...grpc.CallOption) (*QueryAllStoredMinerResponse, error) {
	out := new(QueryAllStoredMinerResponse)
	err := c.cc.Invoke(ctx, "/luktechlabs.cosmosminer.cosmosminer.Query/StoredMinerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MinerBalance(ctx context.Context, in *QueryGetMinerBalanceRequest, opts ...grpc.CallOption) (*QueryGetMinerBalanceResponse, error) {
	out := new(QueryGetMinerBalanceResponse)
	err := c.cc.Invoke(ctx, "/luktechlabs.cosmosminer.cosmosminer.Query/MinerBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MinerBalanceAll(ctx context.Context, in *QueryAllMinerBalanceRequest, opts ...grpc.CallOption) (*QueryAllMinerBalanceResponse, error) {
	out := new(QueryAllMinerBalanceResponse)
	err := c.cc.Invoke(ctx, "/luktechlabs.cosmosminer.cosmosminer.Query/MinerBalanceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a MinerInfo by index.
	MinerInfo(context.Context, *QueryGetMinerInfoRequest) (*QueryGetMinerInfoResponse, error)
	// Queries a StoredMinerTemplate by index.
	StoredMinerTemplate(context.Context, *QueryGetStoredMinerTemplateRequest) (*QueryGetStoredMinerTemplateResponse, error)
	// Queries a list of StoredMinerTemplate items.
	StoredMinerTemplateAll(context.Context, *QueryAllStoredMinerTemplateRequest) (*QueryAllStoredMinerTemplateResponse, error)
	// Queries a StoredMiner by index.
	StoredMiner(context.Context, *QueryGetStoredMinerRequest) (*QueryGetStoredMinerResponse, error)
	// Queries a list of StoredMiner items.
	StoredMinerAll(context.Context, *QueryAllStoredMinerRequest) (*QueryAllStoredMinerResponse, error)
	// Queries a MinerBalance by index.
	MinerBalance(context.Context, *QueryGetMinerBalanceRequest) (*QueryGetMinerBalanceResponse, error)
	// Queries a list of MinerBalance items.
	MinerBalanceAll(context.Context, *QueryAllMinerBalanceRequest) (*QueryAllMinerBalanceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) MinerInfo(ctx context.Context, req *QueryGetMinerInfoRequest) (*QueryGetMinerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinerInfo not implemented")
}
func (*UnimplementedQueryServer) StoredMinerTemplate(ctx context.Context, req *QueryGetStoredMinerTemplateRequest) (*QueryGetStoredMinerTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredMinerTemplate not implemented")
}
func (*UnimplementedQueryServer) StoredMinerTemplateAll(ctx context.Context, req *QueryAllStoredMinerTemplateRequest) (*QueryAllStoredMinerTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredMinerTemplateAll not implemented")
}
func (*UnimplementedQueryServer) StoredMiner(ctx context.Context, req *QueryGetStoredMinerRequest) (*QueryGetStoredMinerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredMiner not implemented")
}
func (*UnimplementedQueryServer) StoredMinerAll(ctx context.Context, req *QueryAllStoredMinerRequest) (*QueryAllStoredMinerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredMinerAll not implemented")
}
func (*UnimplementedQueryServer) MinerBalance(ctx context.Context, req *QueryGetMinerBalanceRequest) (*QueryGetMinerBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinerBalance not implemented")
}
func (*UnimplementedQueryServer) MinerBalanceAll(ctx context.Context, req *QueryAllMinerBalanceRequest) (*QueryAllMinerBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinerBalanceAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luktechlabs.cosmosminer.cosmosminer.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MinerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMinerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MinerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luktechlabs.cosmosminer.cosmosminer.Query/MinerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MinerInfo(ctx, req.(*QueryGetMinerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredMinerTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStoredMinerTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredMinerTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luktechlabs.cosmosminer.cosmosminer.Query/StoredMinerTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredMinerTemplate(ctx, req.(*QueryGetStoredMinerTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredMinerTemplateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStoredMinerTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredMinerTemplateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luktechlabs.cosmosminer.cosmosminer.Query/StoredMinerTemplateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredMinerTemplateAll(ctx, req.(*QueryAllStoredMinerTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStoredMinerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luktechlabs.cosmosminer.cosmosminer.Query/StoredMiner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredMiner(ctx, req.(*QueryGetStoredMinerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredMinerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStoredMinerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredMinerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luktechlabs.cosmosminer.cosmosminer.Query/StoredMinerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredMinerAll(ctx, req.(*QueryAllStoredMinerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MinerBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMinerBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MinerBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luktechlabs.cosmosminer.cosmosminer.Query/MinerBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MinerBalance(ctx, req.(*QueryGetMinerBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MinerBalanceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMinerBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MinerBalanceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luktechlabs.cosmosminer.cosmosminer.Query/MinerBalanceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MinerBalanceAll(ctx, req.(*QueryAllMinerBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luktechlabs.cosmosminer.cosmosminer.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "MinerInfo",
			Handler:    _Query_MinerInfo_Handler,
		},
		{
			MethodName: "StoredMinerTemplate",
			Handler:    _Query_StoredMinerTemplate_Handler,
		},
		{
			MethodName: "StoredMinerTemplateAll",
			Handler:    _Query_StoredMinerTemplateAll_Handler,
		},
		{
			MethodName: "StoredMiner",
			Handler:    _Query_StoredMiner_Handler,
		},
		{
			MethodName: "StoredMinerAll",
			Handler:    _Query_StoredMinerAll_Handler,
		},
		{
			MethodName: "MinerBalance",
			Handler:    _Query_MinerBalance_Handler,
		},
		{
			MethodName: "MinerBalanceAll",
			Handler:    _Query_MinerBalanceAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmosminer/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMinerInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMinerInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMinerInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetMinerInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMinerInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMinerInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinerInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredMinerTemplateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredMinerTemplateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredMinerTemplateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredMinerTemplateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredMinerTemplateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredMinerTemplateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StoredMinerTemplate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredMinerTemplateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredMinerTemplateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredMinerTemplateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredMinerTemplateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredMinerTemplateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredMinerTemplateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoredMinerTemplate) > 0 {
		for iNdEx := len(m.StoredMinerTemplate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoredMinerTemplate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredMinerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredMinerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredMinerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredMinerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredMinerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredMinerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StoredMiner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredMinerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredMinerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredMinerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredMinerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredMinerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredMinerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoredMiner) > 0 {
		for iNdEx := len(m.StoredMiner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoredMiner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMinerBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMinerBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMinerBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMinerBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMinerBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMinerBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinerBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMinerBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMinerBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMinerBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMinerBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMinerBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMinerBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MinerBalance) > 0 {
		for iNdEx := len(m.MinerBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinerBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMinerInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetMinerInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinerInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetStoredMinerTemplateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredMinerTemplateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoredMinerTemplate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStoredMinerTemplateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStoredMinerTemplateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StoredMinerTemplate) > 0 {
		for _, e := range m.StoredMinerTemplate {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredMinerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredMinerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoredMiner.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStoredMinerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStoredMinerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StoredMiner) > 0 {
		for _, e := range m.StoredMiner {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMinerBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMinerBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinerBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMinerBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMinerBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MinerBalance) > 0 {
		for _, e := range m.MinerBalance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMinerInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMinerInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMinerInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMinerInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMinerInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMinerInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredMinerTemplateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredMinerTemplateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredMinerTemplateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredMinerTemplateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredMinerTemplateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredMinerTemplateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredMinerTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoredMinerTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredMinerTemplateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredMinerTemplateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredMinerTemplateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredMinerTemplateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredMinerTemplateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredMinerTemplateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredMinerTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoredMinerTemplate = append(m.StoredMinerTemplate, StoredMinerTemplate{})
			if err := m.StoredMinerTemplate[len(m.StoredMinerTemplate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredMinerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredMinerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredMinerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredMinerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredMinerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredMinerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredMiner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoredMiner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredMinerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredMinerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredMinerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredMinerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredMinerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredMinerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredMiner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoredMiner = append(m.StoredMiner, StoredMiner{})
			if err := m.StoredMiner[len(m.StoredMiner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMinerBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMinerBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMinerBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMinerBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMinerBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMinerBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinerBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinerBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMinerBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMinerBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMinerBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMinerBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMinerBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMinerBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinerBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinerBalance = append(m.MinerBalance, MinerBalance{})
			if err := m.MinerBalance[len(m.MinerBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
